Day 1
-----
1) Introduction to docker and its architecture , filesystem 
2) docker installation in ubuntu 
   create a new Springboot app + dockerize it + upload into the docker hub 
        will ask all participants to run this 
   create a version 2 of the same springboot app  + upload into the docker hub 
       will ask all to run the version 2

3) docker container basic commands


Day 2
------
4) Docker images - Dockerfile , building images , jib , arg
5) Docker registry
6) Docker compose
7) networking 

Day 3
-----

8) docker swarm 
9) events 
10) 

ssh -i "devexp.pem" ubuntu@ec2-18-222-153-152.us-east-2.compute.amazonaws.com


 1) OS 
 2) JVM - 
 3) application (war , jar) -spring boot -> jar 
 4) configuration 
 
  docker image repo -> docker hub 

 Linux -> lxc 

 isolated OS process which will have its own RAM , CPU, HDD,networking allocation 




  1000's of microservices 

  each and every microservice will run in say 10 - 50 instances 

  service A running in 100 instance has a update 


 in olden days  each and every service will be packed as linux RPM ( 1 GB - 1.5 GB) 

 now as docker images 
 version 1 = 510 MB
version 2 = 512 MB


  docker desktop in windows 

1) Hyper V
2) WSL -> windows support for linux



docker network
--------------

docker network ls
docker network prune




Day 3
-----
1) Docker images - Dockerfile , building images , arg , env 
     Jib -> tool to create docker image without docker deamon/desktop
2) Docker compose
3) Run selenium hub 4 using docker compose 
4) Run Kafka using docker compose 


Day 4
-----
1) docker compose remaining 
2) multistage docker builds 
3) Docker networking
4) events

Day 5
-----
  JIB example (create a docker image without installing docker deamon) 

1) Docker registry
2) Docker swarm intro 
3) jenkins + docker registry + REST API to deploy and start the container
4) basics of nginx 




  docker network ls
 
  to attached a network use 

  docker run imageid --network=none
  
  create 2 containers 

  docker network inspect bridge 

  Bridge (default) -> containers running in same network 
  containers can communicate 
  
  ping from host and show the 2 containers 

   docker attach id

  inside container

 
   ip addr show 
   ping the another container 

   

   Multistage builds 
----------------------
1) 
  



















